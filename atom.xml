<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shuwengexia&#39;blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-02-06T08:17:34.627Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>shuwengexia</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识UART</title>
    <link href="http://example.com/2023/02/06/%E5%88%9D%E8%AF%86UART/"/>
    <id>http://example.com/2023/02/06/%E5%88%9D%E8%AF%86UART/</id>
    <published>2023-02-06T08:16:47.000Z</published>
    <updated>2023-02-06T08:17:34.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UART简介"><a href="#UART简介" class="headerlink" title="UART简介"></a>UART简介</h2><p>UART，即Universal Asynchronous Receiver Transmitter （通用异步收发器）。</p><p>是一种通用的串行、异步通信总线；</p><p>该总线有两条数据线，可以实现全双工的发送和接收；</p><p>在嵌入式系统中常用于主机与辅助设备之间的通信（主控制器和其他芯片或者外围设备通信时使用）</p><hr><p>ps：</p><ol><li><p>并行通信和串行通信</p><p>并行通信：将数据的多个位一次性发送，比如一个8位数据使用8根线进行传送</p><p>串行通信：将数据的多个位逐次发送，比如一个8位数据使用1根线依次进行传送</p></li><li><p>单工通信和双工通信</p><p>单工通信：发送器给接收器发送数据，接收器不能给发送器发送数据，单向的</p><p>双工通信：既可以发送器给接收器发送数据，也可以接收器给发送器发送数据，双向的</p><p>半双工：属于双工通信，但是发送数据过程不能同时进行</p><p>全双工：属于双工通信，但是发送数据过程可以同时进行</p></li><li><p>异步通信和同步通信</p><p>异步通信：收发双方时钟不同步</p><p>同步通信：收发双方使用同一个时钟基准</p></li></ol><hr><h2 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h2><p>波特率用于描述UART通信时的通信速度，其单位为bps(bit per second) ，即每秒钟传送的bit（二进制位）的数量</p><h2 id="UART帧格式"><a href="#UART帧格式" class="headerlink" title="UART帧格式"></a>UART帧格式</h2><p>空闲位：一直是高电平（即1）</p><p>起始位：第一个低电平位（即0）</p><p>数据位：8位，发送数据时先发送低位，例如：发送0x55（01010101）这个数据时，先发送低位1</p><p>校验位（可有可无）：校验数据的正确性，串口使用奇偶校验（别于和校验），当发送数据有偶数个1时，校验位上为1</p><p>停止位：1位&#x2F;1.5位&#x2F;2位，高电平，表示通信的停止</p><p>通信必须一个字节一个字节发送，每发送一个字节都是一个完整的过程，不能连续发送，防止累计误差的出现</p><h2 id="UART控制器"><a href="#UART控制器" class="headerlink" title="UART控制器"></a>UART控制器</h2><p>一般情况下处理器中都会集成UART控制器，我们使用UART进行通信时候只需对其内部的相关寄存器进行设置即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;UART简介&quot;&gt;&lt;a href=&quot;#UART简介&quot; class=&quot;headerlink&quot; title=&quot;UART简介&quot;&gt;&lt;/a&gt;UART简介&lt;/h2&gt;&lt;p&gt;UART，即Universal Asynchronous Receiver Transmitter （通用异</summary>
      
    
    
    
    
    <category term="通信协议" scheme="http://example.com/tags/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>初识RTOS</title>
    <link href="http://example.com/2023/02/04/%E5%88%9D%E8%AF%86RTOS/"/>
    <id>http://example.com/2023/02/04/%E5%88%9D%E8%AF%86RTOS/</id>
    <published>2023-02-04T07:19:27.000Z</published>
    <updated>2023-02-04T07:21:49.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RTOS的简介及分类"><a href="#RTOS的简介及分类" class="headerlink" title="RTOS的简介及分类"></a>RTOS的简介及分类</h2><p>RTOS，即Real Time Operation System（实时操作系统）。</p><p>常见的RTOS有国外的FreeRTOS、μC&#x2F;OS、RTX和国内的RT-Thread、Huawei LiteOS、AliOS-Things等。</p><h2 id="如何学习RTOS"><a href="#如何学习RTOS" class="headerlink" title="如何学习RTOS"></a>如何学习RTOS</h2><ol><li>利用别人移植好的系统，了解RTOS里面的API使用说明（即各个函数的作用），然后调用这些API实现自己想要的功能（浅薄、简单）</li><li>阅读RTOS的源码，探究内核和每个组件的实现方式（有效、困难）</li></ol><h2 id="FreeRTOS简介"><a href="#FreeRTOS简介" class="headerlink" title="FreeRTOS简介"></a>FreeRTOS简介</h2><p>FreeRTOS是一个可裁剪的小型RTOS系统，其特点包括：</p><ul><li><p>FreeRTOS 的内核支持抢占式（高低优先级任务），合作式和时间片调度。</p></li><li><p>SafeRTOS （收费）衍生自 FreeRTOS，SafeRTOS 在代码完整性上相比 FreeRTOS更胜一筹。</p></li><li><p>提供了一个用于低功耗的 Tickless 模式。（将空闲任务闲置的外设时钟关闭）</p></li><li><p>系统的组件在创建时可以选择动态或者静态的 RAM，比如任务、消息队列、信号量、软件定时器等等</p></li><li><p>已经在超过 30 种架构的芯片上进行了移植。</p></li><li><p>FreeRTOS-MPU 支持Corex-M 系列中的 MPU 单元，如 STM32F407。</p></li><li><p>FreeRTOS 系统简单、小巧、易用，通常情况下内核占用 4k-9k 字节的空间。</p></li><li><p>高可移植性，代码主要 C 语言编写。</p></li><li><p>支持实时任务和协程(co-routines 也有称为合作式、协同程序，本教程均成为协程)</p></li><li><p>任务与任务、任务与中断之间可以使用任务通知、消息队列、二值信号量、数值型信号量、递归互斥信号量和互斥信号量进行通信和同步。</p></li><li><p>创新的事件组(或者事件标志)。</p></li><li><p>具有优先级继承特性的互斥信号量。（避免优先级翻转）</p></li><li><p>高效的软件定时器。（区别于硬件定时器）</p></li><li><p>强大的跟踪执行功能。</p></li><li><p>堆栈溢出检测功能。（通过宏定义进行编写，以及利用回调函数【钩子函数】）</p></li><li><p>任务数量不限。（理论上不限，但实际中受限于我们的ram大小）</p></li><li><p>任务优先级不限。（理论上不限，但实际中受限于我们的ram大小）</p></li></ul><h2 id="如何获取FreeRTOS资源"><a href="#如何获取FreeRTOS资源" class="headerlink" title="如何获取FreeRTOS资源"></a>如何获取FreeRTOS资源</h2><ol><li><p>在 <a href="www.freertos.org">官网</a> 获取，在里面可以下载其源码及其手册</p></li><li><p>在<a href="https://sourceforge.net/projects/freertos/files/FreeRTOS">托管网址</a>获取</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;RTOS的简介及分类&quot;&gt;&lt;a href=&quot;#RTOS的简介及分类&quot; class=&quot;headerlink&quot; title=&quot;RTOS的简介及分类&quot;&gt;&lt;/a&gt;RTOS的简介及分类&lt;/h2&gt;&lt;p&gt;RTOS，即Real Time Operation System（实时操作系</summary>
      
    
    
    
    
    <category term="FreeRTOS" scheme="http://example.com/tags/FreeRTOS/"/>
    
  </entry>
  
  <entry>
    <title>CAN过滤器的基础知识</title>
    <link href="http://example.com/2023/01/12/CAN%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2023/01/12/CAN%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2023-01-12T05:44:52.000Z</published>
    <updated>2023-01-12T05:55:40.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CAN过滤器"><a href="#CAN过滤器" class="headerlink" title="CAN过滤器"></a>CAN过滤器</h1><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul><li>STM32的bxCAN接收时必须使用过滤器接收</li><li>根据CAN外设数量的不同有以下情况：<ul><li>只有CAN1：CAN1有14个过滤器</li><li>有CAN1和CAN2：CAN1和CAN2共享28个过滤器</li><li>有CAN1~3：CAN1和CAN2共享28个过滤器，CAN3有独立的14个过滤器</li></ul></li><li>过滤器可以过滤CAN总线上帧的ID号<ul><li>可以不处理不想接收的ID号，只接收想要的ID号</li></ul></li></ul><h2 id="过滤器的过滤模式"><a href="#过滤器的过滤模式" class="headerlink" title="过滤器的过滤模式"></a>过滤器的过滤模式</h2><ul><li>过滤器总长度64位，可以分为2个32位单元或4个16位单元</li><li>两种过滤模式：掩码和列表<ul><li>掩码模式：由两个单元组成通过掩码匹配</li><li>列表模式：由一个单元组成，ID号完全匹配即通过</li></ul></li><li>ID号对齐最高位（MSB）</li><li>仅32位单元可以过滤拓展ID</li><li>在列表模式下，scale为32时，每个过滤器的列表只能写入两个报文ID，若scale为16时，每个过滤器的列表最多可写入4个CAN ID</li></ul><p><img src="Users\20676\Documents\ShareX\Screenshots\2022-11\msedge_pMZGesydnD.png" alt="msedge_pMZGesydnD"></p><h2 id="掩码（不常用掩码模式）"><a href="#掩码（不常用掩码模式）" class="headerlink" title="掩码（不常用掩码模式）"></a>掩码（不常用掩码模式）</h2><ul><li><p>两个单元分别组成匹配ID和掩码（MASK）</p></li><li><p>被过滤的ID号和匹配ID号会和掩码进行按位与运算后再进行匹配</p><ul><li>也就是只有对应的掩码为1的位才会被匹配</li></ul></li><li><p>例如：</p><ul><li>匹配ID为0x200，掩码为0x000，则所有ID号都能通过</li><li>匹配ID为0x200，掩码为0x700，则ID为0x200~0x2FF均可通过</li><li>匹配ID为0x200，掩码为0x7FF，则只有0x200能通过</li></ul></li><li><p>可以指定一个ID号的范围，在这个范围内的ID号可以通过我们的过滤器</p><p>过滤器一共有4种工作模式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">32</span>位宽的掩码模式，  配置过滤<span class="number">2</span>个不同的ID号</span><br><span class="line"><span class="number">32</span>位宽的列表模式，  配置过滤<span class="number">4</span>个不同的ID号</span><br><span class="line"><span class="number">16</span>位宽的列表模式，  配置过滤<span class="number">2</span>个不同的ID号</span><br><span class="line"><span class="number">16</span>位宽的掩码模式    配置过滤<span class="number">1</span>个不同的ID号</span><br></pre></td></tr></table></figure><p>过滤器的位宽:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>位过滤器</span><br><span class="line"><span class="number">32</span>位过滤器</span><br></pre></td></tr></table></figure></li></ul><h2 id="CAN的双接收中断"><a href="#CAN的双接收中断" class="headerlink" title="CAN的双接收中断"></a>CAN的双接收中断</h2><ul><li>每个CAN有两个接收中断，对应两组接收邮箱（FIFO）</li><li>每个过滤器可以绑定一个CAN接收中断</li><li>经过过滤器过滤的帧会进入该过滤器绑定的接收中断对应的邮箱</li><li>匹配时，列表模式的优先级高于掩码模式，其次过滤器编号更小的优先级更高</li></ul><h2 id="使用CAN2过滤ID号（实验）"><a href="#使用CAN2过滤ID号（实验）" class="headerlink" title="使用CAN2过滤ID号（实验）"></a>使用CAN2过滤ID号（实验）</h2><ul><li>CAN1给CAN2发送不同ID号的数据帧</li><li>CAN2使用过滤器进行过滤</li><li>RX0和RX1分别对应不同过滤器，接收到不同数组中</li></ul><p>在之前CAN实验的代码上修改</p><p>这里我们只需要修改CAN2，把CAN_Configfilter()函数中的sFiterconfig拷贝下来</p><p>覆盖掉之前的sFiterconfig.FilterBank</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;<span class="comment">//激活过滤器</span></span><br><span class="line">sFiterconfig.FilterBank=<span class="number">0</span>;<span class="comment">//过滤器编号，CAN1是0~13</span></span><br><span class="line">sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;</span><br><span class="line">sFiterconfig.FilterMode=CAN_FILTERMODE_IDMASK;<span class="comment">//设置为掩码模式</span></span><br><span class="line">sFiterconfig.FilterScale=CAN_FILTERSCALE_32BIT;<span class="comment">//设置为32位宽</span></span><br><span class="line">sFiterconfig.FilterIdHigh=<span class="number">0x0000</span>;<span class="comment">//设置验证码</span></span><br><span class="line">sFiterconfig.FilterIdLow=<span class="number">0x0000</span>;</span><br><span class="line">sFiterconfig.FilterMaskIdHigh=<span class="number">0x0000</span>;</span><br><span class="line">sFiterconfig.FilterMaskIdLow=<span class="number">0x0000</span>;</span><br><span class="line">sFiterconfig.SlaveStartFilterBank=<span class="number">14</span>;</span><br></pre></td></tr></table></figure><ol><li><p>列表模式</p><p>绑定FIFO0</p></li></ol><p>把下面的FilterBank设置为14，FilterMode改为CAN_FILTERMODE_IDLIST，FilterScale改为CAN_FILTERSCALE_16BIT，下面的ID号改为我们需要的ID号，这里我们可以设为0x200左移5位(左移5是为了对齐msb)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;</span><br><span class="line">sFiterconfig.FilterBank=<span class="number">14</span>;<span class="comment">//过滤器编号，CAN2是14~27</span></span><br><span class="line">sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;<span class="comment">//接收到的报文放入到FIFO0中</span></span><br><span class="line">sFiterconfig.FilterMode=CAN_FILTERMODE_IDLIST;<span class="comment">//列表模式</span></span><br><span class="line">sFiterconfig.FilterScale=CAN_FILTERSCALE_32BIT;<span class="comment">//设置32位宽</span></span><br><span class="line">sFiterconfig.FilterIdHigh=<span class="number">0x200</span>&lt;&lt;<span class="number">5</span>;<span class="comment">//基本ID放入到STID中  </span></span><br><span class="line">sFiterconfig.FilterIdLow=<span class="number">0x201</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">sFiterconfig.FilterMaskIdHigh=<span class="number">0x202</span>&lt;&lt;<span class="number">5</span>;<span class="comment">//设置为0时，表示不过滤，可以接收任意的CANID数据，</span></span><br><span class="line">sFiterconfig.FilterMaskIdLow=<span class="number">0x203</span>&lt;&lt;<span class="number">5</span>;<span class="comment">//不为0时，则表示过滤 对应MaskID为1的bit必须与FilterID中的bit位相同的CANID才能接收过来。</span></span><br><span class="line">sFiterconfig.SlaveStartFilterBank=<span class="number">14</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>掩码模式</p><p>绑定FIFO1</p></li></ol><p>在HAL库中FilterIdHigh，FilterIdLow，FilterMaskIdHigh，FilterMaskIdLow</p><p><img src="hexo\source_posts\CAN过滤器的基础知识\Acrobat_AsG4nciY8E.png"></p><p>FilterBank是过滤器编号，为了避免重复，这里设置为15，FilterMode选择CAN_FILTERMODE_IDMASK，因为我们这里过滤标准帧，没必要使用32位，所以FilterScale选择16位，FilterIdHigh，FilterIdLow在16位模式下指代两个不同的掩码组，FilterIdHigh对应FilterMaskIdHigh，FilterIdLow对应FilterMaskIdLow，一共是两组；如果是32位，就要把他们整个拼成一段整体，因此这里我们需要把它们拼成两组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;</span><br><span class="line">sFiterconfig.FilterBank=<span class="number">15</span>;<span class="comment">//过滤器编号，CAN2是14~27</span></span><br><span class="line">sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO1;</span><br><span class="line">sFiterconfig.FilterMode=CAN_FILTERMODE_IDLIST;</span><br><span class="line">sFiterconfig.FilterScale=CAN_FILTERSCALE_16BIT;</span><br><span class="line">sFiterconfig.FilterIdHigh=<span class="number">0x200</span>&lt;&lt;<span class="number">5</span>;<span class="comment">//ID和掩码都要移5位</span></span><br><span class="line">sFiterconfig.FilterMaskIdHigh=<span class="number">0x202</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">sFiterconfig.FilterIdLow=<span class="number">0x201</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">sFiterconfig.FilterMaskIdLow=<span class="number">0x203</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">sFiterconfig.SlaveStartFilterBank=<span class="number">14</span>;</span><br></pre></td></tr></table></figure><p>把FilterMaskIdHigh设置为0x700，这样就表示过滤0x200到0x2FF的ID号</p><p>把FilterMaskIdHigh设置为0x7F0，这样就表示过滤0x200到0x20F的ID号</p><p>这里我们设置为0x7F0，更方便我们观察现象</p><p>然后把FilterFIFOAssignment改为CAN_FILTER_FIFO1，即绑定FIFO1，对应RX1的中断，这样就完成了掩码模式的配置</p><p>最终CAN_Configfilter()代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CAN_Configfilter</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  CAN_FilterTypeDef sFiterconfig;</span><br><span class="line">  sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;</span><br><span class="line">  sFiterconfig.FilterBank=<span class="number">0</span>;</span><br><span class="line">  sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;</span><br><span class="line">  sFiterconfig.FilterMode=CAN_FILTERMODE_IDMASK;</span><br><span class="line">  sFiterconfig.FilterScale=CAN_FILTERSCALE_32BIT;</span><br><span class="line">  sFiterconfig.FilterIdHigh=<span class="number">0x0000</span>;</span><br><span class="line">  sFiterconfig.FilterIdLow=<span class="number">0x0000</span>;</span><br><span class="line">  sFiterconfig.FilterMaskIdHigh=<span class="number">0x0000</span>;</span><br><span class="line">  sFiterconfig.FilterMaskIdLow=<span class="number">0x0000</span>;</span><br><span class="line">  sFiterconfig.SlaveStartFilterBank=<span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( HAL_CAN_ConfigFilter(&amp;hcan1,&amp;sFiterconfig)!=HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">//列表模式</span></span><br><span class="line">  sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;</span><br><span class="line">  sFiterconfig.FilterBank=<span class="number">14</span>;</span><br><span class="line">  sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;</span><br><span class="line">  sFiterconfig.FilterMode=CAN_FILTERMODE_IDLIST;</span><br><span class="line">  sFiterconfig.FilterScale=CAN_FILTERSCALE_16BIT;</span><br><span class="line">  sFiterconfig.FilterIdHigh=<span class="number">0x200</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.FilterIdLow=<span class="number">0x201</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.FilterMaskIdHigh=<span class="number">0x202</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.FilterMaskIdLow=<span class="number">0x203</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.SlaveStartFilterBank=<span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( HAL_CAN_ConfigFilter(&amp;hcan2,&amp;sFiterconfig)!=HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//掩码模式</span></span><br><span class="line">  sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;</span><br><span class="line">  sFiterconfig.FilterBank=<span class="number">15</span>;</span><br><span class="line">  sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;</span><br><span class="line">  sFiterconfig.FilterMode=CAN_FILTERMODE_IDMASK;</span><br><span class="line">  sFiterconfig.FilterScale=CAN_FILTERSCALE_16BIT;</span><br><span class="line">  sFiterconfig.FilterIdHigh=<span class="number">0x200</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.FilterIdLow=<span class="number">0x201</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.FilterMaskIdHigh=<span class="number">0x202</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.FilterMaskIdLow=<span class="number">0x203</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.SlaveStartFilterBank=<span class="number">14</span>;</span><br><span class="line">  <span class="keyword">if</span>(HAL_CAN_Start(&amp;hcan1)!=HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(HAL_CAN_Start(&amp;hcan2)!=HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(HAL_CAN_ActivateNotification(&amp;hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING!=HAL_OK))</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(HAL_CAN_ActivateNotification(&amp;hcan2,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING!=HAL_OK))</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_can_RxFifo0MsgPendingCallback</span><span class="params">(CAN_HandleTypeDef*hcan)</span><span class="comment">//接收数据的回调函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(hcan==&amp;hcan2)</span><br><span class="line">  &#123;</span><br><span class="line">    HAL_CAN_GetRxMessage(&amp;hcan2,CAN_RX_FIFO0,&amp;rxHeader0,rxDateBuffer0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="comment">//RX0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_can_RxFifo1MsgPendingCallback</span><span class="params">(CAN_HandleTypeDef*hcan)</span><span class="comment">//接收数据的回调函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(hcan==&amp;hcan2)</span><br><span class="line">  &#123;</span><br><span class="line">    HAL_CAN_GetRxMessage(&amp;hcan2,CAN_RX_FIFO1,&amp;rxHeader1,rxDateBuffer1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="comment">//RX1</span></span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><p>然后就可以编译烧录。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CAN过滤器&quot;&gt;&lt;a href=&quot;#CAN过滤器&quot; class=&quot;headerlink&quot; title=&quot;CAN过滤器&quot;&gt;&lt;/a&gt;CAN过滤器&lt;/h1&gt;&lt;h2 id=&quot;过滤器&quot;&gt;&lt;a href=&quot;#过滤器&quot; class=&quot;headerlink&quot; title=&quot;过滤器</summary>
      
    
    
    
    
    <category term="嵌入式学习" scheme="http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="http://example.com/2023/01/11/test/"/>
    <id>http://example.com/2023/01/11/test/</id>
    <published>2023-01-11T05:56:00.000Z</published>
    <updated>2023-01-11T07:16:03.880Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个测试文档</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个测试文档&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="test" scheme="http://example.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/01/11/hello-world/"/>
    <id>http://example.com/2023/01/11/hello-world/</id>
    <published>2023-01-11T04:20:20.362Z</published>
    <updated>2023-01-11T07:21:15.005Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="test" scheme="http://example.com/tags/test/"/>
    
  </entry>
  
</feed>
