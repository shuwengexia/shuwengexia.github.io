<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shuwengexia&#39;blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-02T13:00:42.098Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>shuwengexia</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ROS学习</title>
    <link href="http://example.com/2023/05/02/ROS%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/05/02/ROS%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-05-02T12:59:38.000Z</published>
    <updated>2023-05-02T13:00:42.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ROS学习"><a href="#ROS学习" class="headerlink" title="ROS学习"></a>ROS学习</h1><h2 id="初识ROS"><a href="#初识ROS" class="headerlink" title="初识ROS"></a>初识ROS</h2><p><img src="C:%5CUsers%5C20676%5CDesktop%5Cnotes%5C%E5%9B%BE%E7%89%87%5Cimage-20230411211540278.png" alt="image-20230411211540278"></p><p><img src="C:%5CUsers%5C20676%5CDesktop%5Cnotes%5C%E5%9B%BE%E7%89%87%5Cimage-20230411211734475.png" alt="image-20230411211734475"></p><p><img src="C:%5CUsers%5C20676%5CDesktop%5Cnotes%5C%E5%9B%BE%E7%89%87%5Cimage-20230411211828240.png" alt="image-20230411211828240"></p><h2 id="常见Linux命令"><a href="#常见Linux命令" class="headerlink" title="常见Linux命令"></a>常见Linux命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;文本&quot; //显示内容</span><br><span class="line">gedit 脚本名.sh//创建一个脚本文件</span><br><span class="line">source 脚本名.sh //运行一个脚本文件</span><br></pre></td></tr></table></figure><h3 id="终端启动脚本"><a href="#终端启动脚本" class="headerlink" title="终端启动脚本"></a>终端启动脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.bashrc =终端启动脚本 //隐藏文件，可用ls -a查看</span><br></pre></td></tr></table></figure><p>终端程序的初始化脚本：首先执行该脚本，完成一些环境变量的赋值工作</p><h3 id="执行管理员权限"><a href="#执行管理员权限" class="headerlink" title="执行管理员权限"></a>执行管理员权限</h3><p>ubuntu权限机制：</p><p>每个用户通常只能操作自己“主文件夹”里的数据，在主文件夹外的区域新建目录或者删除文件会提示权限不足</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo = 以管理员权限执行本条指令</span><br><span class="line">//安装软件包</span><br><span class="line">sudo apt install &quot;软件包名&quot;</span><br></pre></td></tr></table></figure><h2 id="ROS安装"><a href="#ROS安装" class="headerlink" title="ROS安装"></a>ROS安装</h2><p>Linux版本：ubuntu 20.04</p><p>ROS版本：Noetic</p><h3 id="ROS官方安装步骤"><a href="#ROS官方安装步骤" class="headerlink" title="ROS官方安装步骤"></a>ROS官方安装步骤</h3><ol><li>进入<a href="www.ros.org">官网</a></li><li>选择对应版本进行下载</li><li>然后根据官方对应的安装步骤进行安装</li></ol><ul><li>配置ubuntu的软件仓库（在安装ubuntu的时候就已经安装好了）</li><li>将ros的安装源添加到sources.list（给ubuntu装个ROS的应用商店）</li><li>设置安装密钥</li><li>下载安装ROS</li><li>环境参数设置（在~&#x2F;.bashrc的脚本文件里把ros启动命令添加进去）</li><li>rosdep初始化</li></ul><h2 id="使用ROS"><a href="#使用ROS" class="headerlink" title="使用ROS"></a>使用ROS</h2><p>在<a href="index.ros.org">ROS index</a>中寻找ROS资源和软件包、源码库、系统依赖项和相关文档（PACKAGE LIST）</p><p>安装对应的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install &quot;软件包名&quot;</span><br></pre></td></tr></table></figure><p>启动ROS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure><p>启动软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun &quot;软件包名&quot; &quot;节点名&quot;</span><br></pre></td></tr></table></figure><p>可以用仿真小乌龟进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-noetic-turtlesim</span><br><span class="line">rosrun turtlesim turtlesim_node</span><br></pre></td></tr></table></figure><p><img src="Users\20676\Desktop\notes\图片\image-20230413215704293.png" alt="image-20230413215704293"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建工作空间目录结构</span></span><br><span class="line">mkdir catkin_ws</span><br><span class="line">cd catkin_ws</span><br><span class="line">mkdir src</span><br></pre></td></tr></table></figure><p>在GitHub上下载源代码到src</p><p>下载完后</p><p><img src="Users\20676\Desktop\notes\图片\image-20230413220246922.png" alt="image-20230413220246922"></p><p><img src="Users\20676\Desktop\notes\图片\image-20230413220315330.png" alt="image-20230413220315330"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用脚本安装编译需要的依赖库</span></span><br><span class="line">./install_for_noetic.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在~/catkin_ws目录下运行catkin_make进行编译</span></span><br><span class="line">cd ~/catkin_ws</span><br><span class="line">catkin make</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用<span class="built_in">source</span>指令载入工作空间的环境设置</span></span><br><span class="line">source ~/catkin_ws/devel/setup.bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用roslaunch运行编译好的ROS程序</span></span><br><span class="line">roslaunch wpr_simulation wpb_simple.launch</span><br></pre></td></tr></table></figure><p><img src="Users\20676\Desktop\notes\图片\image-20230413222705717.png" alt="image-20230413222705717"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gedit ~/.bashrc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将<span class="built_in">source</span>指令添加到.bashrc脚本中</span></span><br><span class="line">source ~/catkin_ws/devel/setup.bash</span><br></pre></td></tr></table></figure><h2 id="Terminator超级终端"><a href="#Terminator超级终端" class="headerlink" title="Terminator超级终端"></a>Terminator超级终端</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装Terminator</span></span><br><span class="line">sudo apt install terminator</span><br></pre></td></tr></table></figure><p>启动快捷键</p><p>Ctrl+Alt+T</p><p>终止快捷键</p><p>Ctrl+C</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Terminator快捷键</span></span><br><span class="line">Ctrl+Alt+T #打开Terminator</span><br><span class="line">按住Ctrl和Shift，敲下E #可以将终端分成左右两个终端</span><br><span class="line">按住Ctrl和Shift，敲下O #可以将终端分成上下两个终端</span><br><span class="line">按住Ctrl和Shift，敲下W #关闭开出来的终端</span><br><span class="line">按住Alt，通过方向键切换终端焦点</span><br></pre></td></tr></table></figure><p><img src="Users\20676\Desktop\notes\图片\image-20230413230257513.png" alt="image-20230413230257513"></p><h2 id="Node节点和Package包"><a href="#Node节点和Package包" class="headerlink" title="Node节点和Package包"></a>Node节点和Package包</h2><p>ROS中最基本的程序单元Node，节点的组织形式Package，或者可以将Package理解为Node的容器</p><p>ROS安装节点时必须以包为单位进行安装</p><h3 id="创建Package包"><a href="#创建Package包" class="headerlink" title="创建Package包"></a>创建Package包</h3><p><img src="Users\20676\Desktop\notes\图片\image-20230413233015754.png" alt="image-20230413233015754"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">例如：</span></span><br><span class="line">catkin_create_pkg ssr_pkg rospy roscpp std_msgs</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">catkin_create_pkg：创建软件包的指令</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ssr_pkg:软件包名字</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">rospy roscpp std_msgs：依赖项</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">rospy：提供python支持</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">roscpp：提供c++支持</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">std_msgs:标准消息包</span></span><br></pre></td></tr></table></figure><h3 id="回访依赖项"><a href="#回访依赖项" class="headerlink" title="回访依赖项"></a>回访依赖项</h3><p>roscd,在终端中进入指定软件包的文件地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code &quot;文件名&quot; #用VSCode打开对应文件</span><br></pre></td></tr></table></figure><p><img src="Users\20676\Desktop\notes\图片\image-20230413234321360.png" alt="image-20230413234321360"></p><h3 id="创建Node节点"><a href="#创建Node节点" class="headerlink" title="创建Node节点"></a>创建Node节点</h3><p>在src文件夹下创建新文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;文件名_node&quot;.cpp</span><br></pre></td></tr></table></figure><p>编写代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*code*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译源码</p><p>在CMakeLists.txt里为该文件里新建的节点添加编译规则</p><p>可以在##Declare a C++ executable注释下找到声明一个C++可执行文件的指令</p><p>Ctrl+Shift+B编译</p><p>需要对节点进行ROS初始化，这样才能和ROS系统产生连接</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;节点名&quot;</span>);</span><br><span class="line">    <span class="comment">/*code*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//ros::init(argc, argv, &quot;demo&quot;);//node初始化</span></span><br></pre></td></tr></table></figure><p>在ROS节点里面设置while循环，循环条件要使用ros::ok()</p><h3 id="运行Node节点"><a href="#运行Node节点" class="headerlink" title="运行Node节点"></a>运行Node节点</h3><p><img src="Users\20676\Desktop\notes\图片\image-20230414113934776.png" alt="image-20230414113934776"></p><p>Ctrl+Shift+O分出新终端</p><p><em>记得把工作 空间的环境参数加载到终端程序里面</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/catkin_ws/devel/setup.bash</span><br></pre></td></tr></table></figure><p>或者提前把该指令写到.bashrc</p><p><img src="Users\20676\Desktop\notes\图片\image-20230414114045430.png" alt="image-20230414114045430"></p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><img src="Users\20676\Desktop\notes\图片\image-20230414115947211.png" alt="image-20230414115947211"></p><h2 id="ROS的主要通讯方式"><a href="#ROS的主要通讯方式" class="headerlink" title="ROS的主要通讯方式"></a>ROS的主要通讯方式</h2><ol><li>话题Topic是节点间进行持续通讯的一种形式。</li><li>话题通讯的两个节点通过话题的名称建立起话题通讯连接。</li><li>话题中通讯的数据，叫做消息Message。</li><li>消息Message通常会按照一定的频率持续不断的发送，以保证消息数据的实时性。</li><li>消息的发送方叫做话题的发布者Publisher。</li><li>消息的接收方叫做话题的订阅者Subsciber。</li></ol><h3 id="Topic补充"><a href="#Topic补充" class="headerlink" title="Topic补充"></a>Topic补充</h3><ol><li>一个ROS节点网络中，可以同时存在多人话题。</li><li>一个话题可以有多个发布者，也可以有多人订阅者。</li><li>一个节点可以对多个话题进行订阅，也可以发布多人话题。</li><li>不同的传感器消息通常会拥有各自独立话题名称，每个话题只有一个发布者。</li><li>机器人速度指令话题通常会有多个发布者，但是同一时间只能有一个发言人。</li></ol><h2 id="Publisher发布者的C-实现"><a href="#Publisher发布者的C-实现" class="headerlink" title="Publisher发布者的C++实现"></a>Publisher发布者的C++实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*创建命名空间*/</span></span><br><span class="line"><span class="comment">//n 是全局命名空间</span></span><br><span class="line">ros::NodeHandle n;</span><br><span class="line"><span class="comment">//nh 是局部命名空间</span></span><br><span class="line"><span class="function">ros::NodeHandle <span class="title">nh</span><span class="params">(<span class="string">&quot;~&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*全局命名空间下的Param*/</span></span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;global namespace&quot;</span>);</span><br><span class="line"><span class="comment">//提取全局命名空间下的参数num</span></span><br><span class="line">n.<span class="built_in">getParam</span>(<span class="string">&quot;num&quot;</span>, number);</span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;global_num was %d&quot;</span>, number);</span><br><span class="line"><span class="comment">//提取局部命名空间下的参数num</span></span><br><span class="line">n.<span class="built_in">getParam</span>(<span class="string">&quot;demo/num&quot;</span>, number);<span class="comment">//在全局命名空间下，要提取局部命名空间下的参数，需要添加node name</span></span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;global_to_local_num was %d&quot;</span>, number);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*局部命名空间下的Param*/</span></span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;local namespace&quot;</span>);</span><br><span class="line"><span class="comment">//提取局部命名空间下的参数num</span></span><br><span class="line">nh.<span class="built_in">getParam</span>(<span class="string">&quot;num&quot;</span>, number);</span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;local_num was %d&quot;</span>, number);</span><br><span class="line"><span class="comment">//提取全局命名空间下的参数num</span></span><br><span class="line">nh.<span class="built_in">getParam</span>(<span class="string">&quot;/num&quot;</span>, number);<span class="comment">//在局部命名空间下，要提取全局命名空间下的参数，需要添加“/”</span></span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;local_to_global_num was %d&quot;</span>, number);</span><br><span class="line">ros::<span class="built_in">spin</span>();</span><br></pre></td></tr></table></figure><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;std_msgs/String.h&gt;</span><span class="comment">//添加包含的消息类型对应的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;节点名&quot;</span>);</span><br><span class="line">ros::NodeHandle nh;</span><br><span class="line">    <span class="comment">//构建消息发送对象(注意Topic名不能为中文)</span></span><br><span class="line">ros::Publisher pub=nh.<span class="built_in">advertise</span>&lt;std_msgs::String&gt;(<span class="string">&quot;Topic名&quot;</span>,缓存长度);</span><br><span class="line">    <span class="comment">//生成一个消息包，消息类型是std_msgs::String，消息包对象名称msg</span></span><br><span class="line">    <span class="comment">/*code*/</span></span><br><span class="line">    std_msgs::String msg;</span><br><span class="line">    msg.data=<span class="string">&quot;消息内容&quot;</span>;</span><br><span class="line">    pub.<span class="built_in">publish</span>(msg);<span class="comment">//通过pub把消息发送出去</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rostopic list<span class="comment">//显示活跃的话题名称</span></span><br><span class="line">rostopic echo 话题名称<span class="comment">//查看话题里的消息内容</span></span><br><span class="line">echo -e <span class="string">&quot;消息内容&quot;</span><span class="comment">//显示被赋值的消息包内容</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;std_msgs/String.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;节点名&quot;</span>); </span><br><span class="line">ros::NodeHandle nh;</span><br><span class="line">    <span class="comment">//构建消息发送对象</span></span><br><span class="line">ros::Publisher pub=nh.<span class="built_in">advertise</span>&lt;std_msgs::String&gt;(<span class="string">&quot;Topic名&quot;</span>,缓存长度);</span><br><span class="line">    </span><br><span class="line">    ros::Rate <span class="string">&quot;频率对象的名字&quot;</span>(要控制循环每秒执行的次数)<span class="comment">//如：填入10就代表1秒钟执行10次</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//生成一个消息包，消息类型是std_msgs::String，消息包对象名称msg</span></span><br><span class="line"><span class="comment">/*code*/</span></span><br><span class="line">    std_msgs::String msg;</span><br><span class="line">    msg.data=<span class="string">&quot;消息内容&quot;</span>;</span><br><span class="line">    pub.<span class="built_in">publish</span>(msg);<span class="comment">//通过pub把消息发送出去</span></span><br><span class="line">    </span><br><span class="line">频率对象的名字.<span class="built_in">sleep</span>();<span class="comment">//做一个短时间的阻塞，相当于延时，或者设置发送消息频率</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic hz<span class="comment">//查看话题里的消息发送频率</span></span><br></pre></td></tr></table></figure><h3 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h3><p><img src="C:%5CUsers%5C20676%5CDesktop%5Cnotes%5C%E5%9B%BE%E7%89%87%5Cimage-20230415142432956.png" alt="image-20230415142432956"></p><h3 id="rostopic指令"><a href="#rostopic指令" class="headerlink" title="rostopic指令"></a>rostopic指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rostopic list #列出当前系统中所有活跃着的话题</span><br><span class="line">rostopic echo 主题名称 #显示指定话题中发送的消息包内容</span><br><span class="line">rostopic hz 主题名称 #统计指定话题中消息包发送频率</span><br></pre></td></tr></table></figure><h2 id="Subscriber订阅者的C-实现"><a href="#Subscriber订阅者的C-实现" class="headerlink" title="Subscriber订阅者的C++实现"></a>Subscriber订阅者的C++实现</h2><h3 id="创建订阅者节点"><a href="#创建订阅者节点" class="headerlink" title="创建订阅者节点"></a>创建订阅者节点</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ROS学习&quot;&gt;&lt;a href=&quot;#ROS学习&quot; class=&quot;headerlink&quot; title=&quot;ROS学习&quot;&gt;&lt;/a&gt;ROS学习&lt;/h1&gt;&lt;h2 id=&quot;初识ROS&quot;&gt;&lt;a href=&quot;#初识ROS&quot; class=&quot;headerlink&quot; title=&quot;初识R</summary>
      
    
    
    
    
    <category term="ROS" scheme="http://example.com/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习</title>
    <link href="http://example.com/2023/04/07/Docker%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/04/07/Docker%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-04-07T03:15:07.000Z</published>
    <updated>2023-04-07T03:16:04.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker学习"><a href="#Docker学习" class="headerlink" title="Docker学习"></a>Docker学习</h1><blockquote><p>弱小和无知不是生存的障碍，傲慢才是。—–《三体》</p></blockquote><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><ul><li>Docker概述</li><li>Docker安装</li><li>Docker命令<ul><li>镜像命令</li><li>容器命令</li><li>操作命令</li><li>…</li></ul></li><li>Docker镜像</li><li>容器数据卷</li><li>DockerFile</li><li>Docker网络原理</li><li>IDEA整合Docker</li><li>Docker Compose</li><li>Docker Swarm</li><li>CNCD Jenkins</li></ul><h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><p>开发与运维的矛盾（环境配置）</p><p>例如：</p><p>传统：java—apk—发布（应用商店）—用户使用apk—安装即可</p><p>现在：java—jar（环境）—打包项目带上环境（镜像）—Docker仓库：商店—下载我们发布的镜像—直接运行即可</p><p>Docker是用go语言写的</p><p>Docker的核心理念是隔离</p><p>Docker通过隔离机制，可以将服务器利用到极致</p><hr><p>虚拟机技术：</p><p>在windows中安装一个VMware，通过这个软件，我们可以虚拟出来一台或者多台电脑，但是比较笨重</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">VM:</span>安装一个Linux版本的原生镜像（一个电脑），利用虚拟机实现隔离，一般占用几个G，开机往往要几分钟</span><br><span class="line">Docker：可以直接实现隔离，下载的镜像（最核心的环境+jdk+mysql）十分小巧，可以直接运行镜像，一般占用几个M甚至KB级别，可以做到秒级启动</span><br></pre></td></tr></table></figure><h1 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h1><h3 id="镜像（image）"><a href="#镜像（image）" class="headerlink" title="镜像（image）:"></a>镜像（image）:</h3><p>Docker镜像就好比一个模板，可以通过这个模板来创建容器服务，tomcat&#x3D;&gt;run&#x3D;&gt;tomcat01容器（提供服务器），通过这个镜像可以通过创建多个容器（最终服务或者项目运行就是在容器中的）</p><hr><p>可以理解为软件安装包，可以方便的进行传播和安装</p><h3 id="容器（container）"><a href="#容器（container）" class="headerlink" title="容器（container）:"></a>容器（container）:</h3><p>Docker利用容器技术，独立运行一个或者一个组应用，通过镜像来创建的</p><p>启动，停止，删除，基本命令</p><p>目前就可以把这个容器理解为就是一个简易的Linux系统</p><hr><p>软件安装后的状态，每个软件运行环境都是独立的，隔离的，称之为容器</p><h3 id="仓库（repository）"><a href="#仓库（repository）" class="headerlink" title="仓库（repository）:"></a>仓库（repository）:</h3><p>仓库就是存放镜像的地方</p><p>仓库分为公有仓库和私有仓库</p><p>国外：Docker Hub（默认）</p><p>国内：阿里云（配置镜像加速）</p><p>![](C:\Users\20676\Desktop\notes\图片\屏幕截图 2023-03-27 211717.png)</p><h2 id="安-装Docker"><a href="#安-装Docker" class="headerlink" title="安 装Docker"></a>安 装Docker</h2><p>1、需要一点点Linux基础</p><p>2、按照官网教程一步步操作</p><p><a href="https://docs.docker.com/desktop/install/ubuntu/">Install Docker Desktop on Ubuntu</a></p><p> 3、更改镜像源为阿里云</p><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><p>#info|version</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker info       #显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker version    #显示docker的版本信息。</span><br></pre></td></tr></table></figure><p>#帮助命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker 命令 --help </span><br></pre></td></tr></table></figure><p>#镜像命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images #查看所有本地主机上的镜像 </span><br><span class="line">docker image ls#或者这个命令</span><br></pre></td></tr></table></figure><p>#搜索镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search </span><br></pre></td></tr></table></figure><p>#下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull</span><br><span class="line">或者</span><br><span class="line">docker image pull</span><br></pre></td></tr></table></figure><p>#删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi</span><br><span class="line">或者</span><br><span class="line">docker image rm</span><br></pre></td></tr></table></figure><p>##容器命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像id #新建容器并启动</span><br></pre></td></tr></table></figure><p>#列出所有运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps#只列出在运行的容器</span><br><span class="line">docker ps -a#列出所有容器（运行和未运行）</span><br><span class="line">或者</span><br><span class="line">docker container list</span><br></pre></td></tr></table></figure><p>#删除指定容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id </span><br></pre></td></tr></table></figure><p>#删除所有容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $(docker ps -aq)   #删除所有的容器</span><br><span class="line">或者</span><br><span class="line">docker ps -a -q</span><br></pre></td></tr></table></figure><p>##启动和停止容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id#启动容器</span><br></pre></td></tr></table></figure><p>#重启容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 容器id</span><br></pre></td></tr></table></figure><p>#停止当前正在运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器id</span><br></pre></td></tr></table></figure><p>#强制停止当前容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill 容器id</span><br></pre></td></tr></table></figure><p>##退出容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit #容器直接退出</span><br><span class="line">ctrl +P +Q  #容器不停止退出 ---注意：这个很有用的操作</span><br></pre></td></tr></table></figure><p>#其他常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d 镜像名  #后台启动命令</span><br></pre></td></tr></table></figure><p>#查看日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs </span><br></pre></td></tr></table></figure><p>#查看容器中进程信息ps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器id </span><br></pre></td></tr></table></figure><p>#查看镜像的元数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器id  </span><br></pre></td></tr></table></figure><p>#新建一个终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec#进入当前容器后开启一个新的终端，可以在里面操作（常用）</span><br></pre></td></tr></table></figure><p>#进入终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach # 进入容器正在执行的终端</span><br></pre></td></tr></table></figure><p>#拷贝</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内路径  主机目的路径#从容器内拷贝到主机上</span><br></pre></td></tr></table></figure><p>#连接容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach#连接到正在运行中的容器</span><br></pre></td></tr></table></figure><p>#创建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build#使用 Dockerfile 创建镜像</span><br></pre></td></tr></table></figure><h2 id="Docker杂"><a href="#Docker杂" class="headerlink" title="Docker杂"></a>Docker杂</h2><hr><blockquote><p><strong>容器命令</strong></p></blockquote><hr><ul><li>仓库名“：”后面加tag（即指定镜像版本号），如果没有指定，则默认为latest（最新版）<br>![](C:\Users\20676\Desktop\notes\图片\屏幕截图 2023-03-29 225807.png)</li></ul><blockquote><p>两条命令运行是一样的效果，不过第一条是在ubuntu15.10的环境里面运行该命令</p></blockquote><ul><li><p>如果运行的镜像本地不存在，那么会默认下载后运行</p></li><li><blockquote><p>docker run -i -t -d ubuntu:15.10 &#x2F;bin&#x2F;bash</p><p>可以写为</p><p>docker run -itd ubuntu:15.10 &#x2F;bin&#x2F;bash</p><p>“ -i”:标准化输入</p><p>“ -t”:在这个容器内指定一个终端或者伪终端（&#x2F;bin&#x2F;bash）</p><p>“ -d”:在后台运行</p></blockquote></li><li><p>运行完以上任务后回车就可以进入到该容器内</p></li><li><blockquote><p>ls</p><p>可以查看该容器内的内容</p><p>exit</p><p>退出该容器</p></blockquote></li><li><blockquote><p>docker ps</p><p>查看正在运行的容器</p><p>docker ps -a</p><p>查看所有的容器（运行和非运行）</p></blockquote></li><li><blockquote><p>docker run -it –name “name” ubuntu:15.10 &#x2F;bin&#x2F;bash</p><p>exit<br>给容器重命名，然后exit退出</p></blockquote></li><li><blockquote><p>Cat &#x2F;etc&#x2F;shells</p><p>查看所有能用的shell（交互程序）</p></blockquote></li><li><blockquote><p>docker attach “容器ID&#x2F;自定义名字”</p><p>连接到容器</p></blockquote></li><li><blockquote><p>docker stop “容器名”</p><p>停止容器</p></blockquote></li><li><blockquote><p>docker rm -f “容器ID&#x2F;容器名”</p><p>删除容器</p><p>docker container prune</p><p>删除所有停止的容器</p></blockquote></li></ul><hr><blockquote><p><strong>镜像命令</strong> </p></blockquote><hr><ul><li><blockquote><p>docker images</p><p>查看本地所有存在的镜像</p></blockquote></li><li><blockquote><p>docker pull “镜像名”</p><p>下载镜像</p></blockquote></li><li><blockquote><p>docker run -d -P training&#x2F;webapp python app.py</p><p>运行一个名叫training&#x2F;webapp的image，然后把它实例化成容器，在这个容器里运行python，将app.py这个文件在容器里执行</p><p>“ -d”:后台运行</p><p>“ -P”:随机端口映射</p></blockquote></li><li><blockquote><p>docker port “端口ID”</p><p>查看端口映射</p></blockquote></li><li><blockquote><p>docker run -d -P 11111:5000 training&#x2F;webapp python app.py</p><p>将镜像的端口映射到5000的端口</p><p>指定端口映射</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker学习&quot;&gt;&lt;a href=&quot;#Docker学习&quot; class=&quot;headerlink&quot; title=&quot;Docker学习&quot;&gt;&lt;/a&gt;Docker学习&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;弱小和无知不是生存的障碍，傲慢才是。—–《三体》&lt;/p&gt;
&lt;/bl</summary>
      
    
    
    
    
    <category term="杂" scheme="http://example.com/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>Git学习</title>
    <link href="http://example.com/2023/04/07/git%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/04/07/git%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-04-07T03:08:42.000Z</published>
    <updated>2023-04-07T03:12:44.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git学习"><a href="#git学习" class="headerlink" title="git学习"></a>git学习</h1><h2 id="git基本理论"><a href="#git基本理论" class="headerlink" title="git基本理论"></a>git基本理论</h2><p><img src="Users\20676\Desktop\notes\图片\15583568a96b26a220f0b58acc506c4.png"></p><ul><li><p>Workspace：工作区，就是平时存放代码的地方</p></li><li><p>Index&#x2F;Stage：暂存区，用于临时存放你的改动，事实上只是一个文件，保存即将提交到文件列表信息</p></li><li><p>Repository：仓库区（本地仓库），安全存放数据的位置，里面有你提交的所有版本的数据，其中HEAD指向最新放入仓库的版本</p></li><li><p>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p></li></ul><p><img src="Users\20676\Desktop\notes\图片\f3b4ce16c9777ff04a9320435f7981d.png" alt="f3b4ce16c9777ff04a9320435f7981d"></p><h2 id="git工作流程"><a href="#git工作流程" class="headerlink" title="git工作流程"></a>git工作流程</h2><ol><li>在工作目录中添加、修改文件</li><li>将需要进行版本管理的文件放入暂存区域，git add</li><li>将暂存区域的文件提交到git仓库，git commit</li><li>将本地仓库的文件传送到远程仓库，git push</li></ol><p>git管理的文件有三种状态：已修改（modified），已暂存（staged），以提交（committed）</p><p><img src="Users\20676\Desktop\notes\图片\d5a29024d6d183c108aab8bc37f3076.png" alt="d5a29024d6d183c108aab8bc37f3076"></p><h2 id="git项目搭建"><a href="#git项目搭建" class="headerlink" title="git项目搭建"></a>git项目搭建</h2><h3 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h3><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库</p><ol><li><p>创建全新的仓库，需要GIT管理的根目录执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在当前目录创建一个git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"><span class="comment">#生成一个.git隐藏文件</span></span><br></pre></td></tr></table></figure></li><li><p>执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p></li></ol><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><ol><li><p>另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#克隆一个项目和它的整个代码历史（版本信息）</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure></li><li><p>去gitee或者github上克隆一个测试</p></li></ol><h2 id="git文件操作"><a href="#git文件操作" class="headerlink" title="git文件操作"></a>git文件操作</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"><span class="comment">#查看所有文件状态</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure><ul><li><p>Untracked：未跟踪，此文件在文件夹中，但并没有加入到git库，不参与版本控制，通过 git add 将状态变为staged。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add . //将所有文件添加到暂存区，此时文件状态从未追踪变为追踪</span><br></pre></td></tr></table></figure></li><li><p>Unmodify：文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致，这种类型的文件也有两个去处，如果它被修改，而变为Modified，如果使用 git rm 移出版本库，则成为Untracked文件 </p></li><li><p>Modified：文件已修改，仅仅是修改，并没有进行其他操作，这个文件也有两个去处，通过 git add 可进入暂存staged状态，使用 git checkout 则丢弃修改过，返回到unmodify状态，这个 git checkout 即从库中取出文件，覆盖当前修改  </p></li><li><p>Staged：暂存状态，执行 git commit 则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为Unmodify状态，执行 git reset HEAD filename 取消暂存，文件状态为Modified</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;注释内容&quot;</span> //提交暂存区中的内容到本地仓库， -m 提交信息</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#忽略文件</span></span><br><span class="line">*.txt <span class="comment">#忽略所有.txt结尾文件</span></span><br><span class="line">!lib.txt<span class="comment">#除了lib.txt文件，其他忽略</span></span><br><span class="line">/temp<span class="comment">#仅忽略项目根目录下的TODO文件，不包括其他目录temp</span></span><br><span class="line">build/<span class="comment">#忽略build/目录下的所有文件</span></span><br></pre></td></tr></table></figure><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置本机绑定SSH公钥，实现免密码生成公钥</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>将公钥信息public key添加到自己的远程仓库中</p><p>许可证：GPL2.0&#x2F;GPL3.0</p><h2 id="IDEA中集中git"><a href="#IDEA中集中git" class="headerlink" title="IDEA中集中git"></a>IDEA中集中git</h2><ol><li>新建项目，绑定git</li><li>修改文件，使用IDEA操作git</li><li>提交测试</li></ol><h2 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h2><p>  git分布中常用指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment">#列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="comment">#新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"><span class="comment">#新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"><span class="comment">#合并指定分支到当前分支</span></span><br><span class="line">git merge [branch]</span><br><span class="line"><span class="comment">#删除分支</span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"><span class="comment">#删除远程分支</span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch] </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git学习&quot;&gt;&lt;a href=&quot;#git学习&quot; class=&quot;headerlink&quot; title=&quot;git学习&quot;&gt;&lt;/a&gt;git学习&lt;/h1&gt;&lt;h2 id=&quot;git基本理论&quot;&gt;&lt;a href=&quot;#git基本理论&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="杂" scheme="http://example.com/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>初识IIC</title>
    <link href="http://example.com/2023/02/10/%E5%88%9D%E8%AF%86IIC/"/>
    <id>http://example.com/2023/02/10/%E5%88%9D%E8%AF%86IIC/</id>
    <published>2023-02-10T08:45:35.000Z</published>
    <updated>2023-02-10T08:50:32.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IIC总线简介"><a href="#IIC总线简介" class="headerlink" title="IIC总线简介"></a>IIC总线简介</h2><p>IIC总线是Philips公司在八十年代初推出的一种串行、半双工总线</p><p>主要用于近距离、低速的芯片之间的通信;</p><p>IIC总线有两根双向的信号线一根数据线SDA用于收发数据，一根时钟线SCL用于通信双方时钟的同步;</p><p>IIC总线硬件结构简单，成本较低，因此在各个领域得到了广泛的应用</p><p>IIC总线是一种多主机总线，连接在IIC总线上的器件分为主机和从机</p><p>主机有权发起和结束一次通信，而从机只能被主机呼叫;</p><p>当总线上有多个主机同时启用总线时，IIC也具备冲突检测和仲裁的功能来防止错误产生;</p><p>每个连接到IIC总线上的器件都有一个唯一的地址(7bit)，且每个器件都可以作为主机也可以作为从机(同一时刻只能有一个主机),总线上的器件增加和删除不影响其他器件正常工作;</p><p> IIC总线在通信时总线上发送数据的器件为发送器，接收数据的器件为接收器;</p><h2 id="IIC总线通信过程"><a href="#IIC总线通信过程" class="headerlink" title="IIC总线通信过程"></a>IIC总线通信过程</h2><ol><li>主机发送起始信号启用总线（其他主机在后面就不会占用总线）</li><li>主机发送一个字节数据（8bit）指明从机地址（7bit）和后续字节的传送方向（1bit）【主机发给从机（0）还是从机发给主机（1）】</li><li>被寻址的从机（各个从机将主机发送的字节高七位地址提取出来与自己的地址比较）发送应答信号回应主机</li><li>发送器（看传送方向确定是主机还是从机）发送一个字节数据</li><li>接收器（看传送方向确定是主机还是从机）发送应答信号回应发送器<br>(循环步骤4、5)</li><li>通信完成后主机发送停止信号释放总线</li></ol><h2 id="IIC总线寻址方式"><a href="#IIC总线寻址方式" class="headerlink" title="IIC总线寻址方式"></a>IIC总线寻址方式</h2><p>IIC总线上传送的数据是广义的，既包括地址，又包括真正的数据</p><p>主机在发送起始信号后必须先发送一个字节的数据，该数据的高7位为从机地址，最低位表示后续字节的传送方向，”0“表示主机发送数据，”1”表示主机接收数据:总线上所有的从机接收到该字节数据后都将这7位地址与自己的地址进行比较，如果相同，则认为自己被主机寻址，然后再根据第8位将自己定为发送器或接收器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IIC总线简介&quot;&gt;&lt;a href=&quot;#IIC总线简介&quot; class=&quot;headerlink&quot; title=&quot;IIC总线简介&quot;&gt;&lt;/a&gt;IIC总线简介&lt;/h2&gt;&lt;p&gt;IIC总线是Philips公司在八十年代初推出的一种串行、半双工总线&lt;/p&gt;
&lt;p&gt;主要用于近距离、</summary>
      
    
    
    
    
    <category term="通信协议" scheme="http://example.com/tags/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>初识UART</title>
    <link href="http://example.com/2023/02/06/%E5%88%9D%E8%AF%86UART/"/>
    <id>http://example.com/2023/02/06/%E5%88%9D%E8%AF%86UART/</id>
    <published>2023-02-06T08:16:47.000Z</published>
    <updated>2023-02-06T08:17:34.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UART简介"><a href="#UART简介" class="headerlink" title="UART简介"></a>UART简介</h2><p>UART，即Universal Asynchronous Receiver Transmitter （通用异步收发器）。</p><p>是一种通用的串行、异步通信总线；</p><p>该总线有两条数据线，可以实现全双工的发送和接收；</p><p>在嵌入式系统中常用于主机与辅助设备之间的通信（主控制器和其他芯片或者外围设备通信时使用）</p><hr><p>ps：</p><ol><li><p>并行通信和串行通信</p><p>并行通信：将数据的多个位一次性发送，比如一个8位数据使用8根线进行传送</p><p>串行通信：将数据的多个位逐次发送，比如一个8位数据使用1根线依次进行传送</p></li><li><p>单工通信和双工通信</p><p>单工通信：发送器给接收器发送数据，接收器不能给发送器发送数据，单向的</p><p>双工通信：既可以发送器给接收器发送数据，也可以接收器给发送器发送数据，双向的</p><p>半双工：属于双工通信，但是发送数据过程不能同时进行</p><p>全双工：属于双工通信，但是发送数据过程可以同时进行</p></li><li><p>异步通信和同步通信</p><p>异步通信：收发双方时钟不同步</p><p>同步通信：收发双方使用同一个时钟基准</p></li></ol><hr><h2 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h2><p>波特率用于描述UART通信时的通信速度，其单位为bps(bit per second) ，即每秒钟传送的bit（二进制位）的数量</p><h2 id="UART帧格式"><a href="#UART帧格式" class="headerlink" title="UART帧格式"></a>UART帧格式</h2><p>空闲位：一直是高电平（即1）</p><p>起始位：第一个低电平位（即0）</p><p>数据位：8位，发送数据时先发送低位，例如：发送0x55（01010101）这个数据时，先发送低位1</p><p>校验位（可有可无）：校验数据的正确性，串口使用奇偶校验（别于和校验），当发送数据有偶数个1时，校验位上为1</p><p>停止位：1位&#x2F;1.5位&#x2F;2位，高电平，表示通信的停止</p><p>通信必须一个字节一个字节发送，每发送一个字节都是一个完整的过程，不能连续发送，防止累计误差的出现</p><h2 id="UART控制器"><a href="#UART控制器" class="headerlink" title="UART控制器"></a>UART控制器</h2><p>一般情况下处理器中都会集成UART控制器，我们使用UART进行通信时候只需对其内部的相关寄存器进行设置即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;UART简介&quot;&gt;&lt;a href=&quot;#UART简介&quot; class=&quot;headerlink&quot; title=&quot;UART简介&quot;&gt;&lt;/a&gt;UART简介&lt;/h2&gt;&lt;p&gt;UART，即Universal Asynchronous Receiver Transmitter （通用异</summary>
      
    
    
    
    
    <category term="通信协议" scheme="http://example.com/tags/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>初识RTOS</title>
    <link href="http://example.com/2023/02/04/%E5%88%9D%E8%AF%86RTOS/"/>
    <id>http://example.com/2023/02/04/%E5%88%9D%E8%AF%86RTOS/</id>
    <published>2023-02-04T07:19:27.000Z</published>
    <updated>2023-02-04T07:21:49.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RTOS的简介及分类"><a href="#RTOS的简介及分类" class="headerlink" title="RTOS的简介及分类"></a>RTOS的简介及分类</h2><p>RTOS，即Real Time Operation System（实时操作系统）。</p><p>常见的RTOS有国外的FreeRTOS、μC&#x2F;OS、RTX和国内的RT-Thread、Huawei LiteOS、AliOS-Things等。</p><h2 id="如何学习RTOS"><a href="#如何学习RTOS" class="headerlink" title="如何学习RTOS"></a>如何学习RTOS</h2><ol><li>利用别人移植好的系统，了解RTOS里面的API使用说明（即各个函数的作用），然后调用这些API实现自己想要的功能（浅薄、简单）</li><li>阅读RTOS的源码，探究内核和每个组件的实现方式（有效、困难）</li></ol><h2 id="FreeRTOS简介"><a href="#FreeRTOS简介" class="headerlink" title="FreeRTOS简介"></a>FreeRTOS简介</h2><p>FreeRTOS是一个可裁剪的小型RTOS系统，其特点包括：</p><ul><li><p>FreeRTOS 的内核支持抢占式（高低优先级任务），合作式和时间片调度。</p></li><li><p>SafeRTOS （收费）衍生自 FreeRTOS，SafeRTOS 在代码完整性上相比 FreeRTOS更胜一筹。</p></li><li><p>提供了一个用于低功耗的 Tickless 模式。（将空闲任务闲置的外设时钟关闭）</p></li><li><p>系统的组件在创建时可以选择动态或者静态的 RAM，比如任务、消息队列、信号量、软件定时器等等</p></li><li><p>已经在超过 30 种架构的芯片上进行了移植。</p></li><li><p>FreeRTOS-MPU 支持Corex-M 系列中的 MPU 单元，如 STM32F407。</p></li><li><p>FreeRTOS 系统简单、小巧、易用，通常情况下内核占用 4k-9k 字节的空间。</p></li><li><p>高可移植性，代码主要 C 语言编写。</p></li><li><p>支持实时任务和协程(co-routines 也有称为合作式、协同程序，本教程均成为协程)</p></li><li><p>任务与任务、任务与中断之间可以使用任务通知、消息队列、二值信号量、数值型信号量、递归互斥信号量和互斥信号量进行通信和同步。</p></li><li><p>创新的事件组(或者事件标志)。</p></li><li><p>具有优先级继承特性的互斥信号量。（避免优先级翻转）</p></li><li><p>高效的软件定时器。（区别于硬件定时器）</p></li><li><p>强大的跟踪执行功能。</p></li><li><p>堆栈溢出检测功能。（通过宏定义进行编写，以及利用回调函数【钩子函数】）</p></li><li><p>任务数量不限。（理论上不限，但实际中受限于我们的ram大小）</p></li><li><p>任务优先级不限。（理论上不限，但实际中受限于我们的ram大小）</p></li></ul><h2 id="如何获取FreeRTOS资源"><a href="#如何获取FreeRTOS资源" class="headerlink" title="如何获取FreeRTOS资源"></a>如何获取FreeRTOS资源</h2><ol><li><p>在 <a href="www.freertos.org">官网</a> 获取，在里面可以下载其源码及其手册</p></li><li><p>在<a href="https://sourceforge.net/projects/freertos/files/FreeRTOS">托管网址</a>获取</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;RTOS的简介及分类&quot;&gt;&lt;a href=&quot;#RTOS的简介及分类&quot; class=&quot;headerlink&quot; title=&quot;RTOS的简介及分类&quot;&gt;&lt;/a&gt;RTOS的简介及分类&lt;/h2&gt;&lt;p&gt;RTOS，即Real Time Operation System（实时操作系</summary>
      
    
    
    
    
    <category term="FreeRTOS" scheme="http://example.com/tags/FreeRTOS/"/>
    
  </entry>
  
  <entry>
    <title>CAN过滤器的基础知识</title>
    <link href="http://example.com/2023/01/12/CAN%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2023/01/12/CAN%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2023-01-12T05:44:52.000Z</published>
    <updated>2023-01-12T05:55:40.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CAN过滤器"><a href="#CAN过滤器" class="headerlink" title="CAN过滤器"></a>CAN过滤器</h1><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul><li>STM32的bxCAN接收时必须使用过滤器接收</li><li>根据CAN外设数量的不同有以下情况：<ul><li>只有CAN1：CAN1有14个过滤器</li><li>有CAN1和CAN2：CAN1和CAN2共享28个过滤器</li><li>有CAN1~3：CAN1和CAN2共享28个过滤器，CAN3有独立的14个过滤器</li></ul></li><li>过滤器可以过滤CAN总线上帧的ID号<ul><li>可以不处理不想接收的ID号，只接收想要的ID号</li></ul></li></ul><h2 id="过滤器的过滤模式"><a href="#过滤器的过滤模式" class="headerlink" title="过滤器的过滤模式"></a>过滤器的过滤模式</h2><ul><li>过滤器总长度64位，可以分为2个32位单元或4个16位单元</li><li>两种过滤模式：掩码和列表<ul><li>掩码模式：由两个单元组成通过掩码匹配</li><li>列表模式：由一个单元组成，ID号完全匹配即通过</li></ul></li><li>ID号对齐最高位（MSB）</li><li>仅32位单元可以过滤拓展ID</li><li>在列表模式下，scale为32时，每个过滤器的列表只能写入两个报文ID，若scale为16时，每个过滤器的列表最多可写入4个CAN ID</li></ul><p><img src="Users\20676\Documents\ShareX\Screenshots\2022-11\msedge_pMZGesydnD.png" alt="msedge_pMZGesydnD"></p><h2 id="掩码（不常用掩码模式）"><a href="#掩码（不常用掩码模式）" class="headerlink" title="掩码（不常用掩码模式）"></a>掩码（不常用掩码模式）</h2><ul><li><p>两个单元分别组成匹配ID和掩码（MASK）</p></li><li><p>被过滤的ID号和匹配ID号会和掩码进行按位与运算后再进行匹配</p><ul><li>也就是只有对应的掩码为1的位才会被匹配</li></ul></li><li><p>例如：</p><ul><li>匹配ID为0x200，掩码为0x000，则所有ID号都能通过</li><li>匹配ID为0x200，掩码为0x700，则ID为0x200~0x2FF均可通过</li><li>匹配ID为0x200，掩码为0x7FF，则只有0x200能通过</li></ul></li><li><p>可以指定一个ID号的范围，在这个范围内的ID号可以通过我们的过滤器</p><p>过滤器一共有4种工作模式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">32</span>位宽的掩码模式，  配置过滤<span class="number">2</span>个不同的ID号</span><br><span class="line"><span class="number">32</span>位宽的列表模式，  配置过滤<span class="number">4</span>个不同的ID号</span><br><span class="line"><span class="number">16</span>位宽的列表模式，  配置过滤<span class="number">2</span>个不同的ID号</span><br><span class="line"><span class="number">16</span>位宽的掩码模式    配置过滤<span class="number">1</span>个不同的ID号</span><br></pre></td></tr></table></figure><p>过滤器的位宽:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>位过滤器</span><br><span class="line"><span class="number">32</span>位过滤器</span><br></pre></td></tr></table></figure></li></ul><h2 id="CAN的双接收中断"><a href="#CAN的双接收中断" class="headerlink" title="CAN的双接收中断"></a>CAN的双接收中断</h2><ul><li>每个CAN有两个接收中断，对应两组接收邮箱（FIFO）</li><li>每个过滤器可以绑定一个CAN接收中断</li><li>经过过滤器过滤的帧会进入该过滤器绑定的接收中断对应的邮箱</li><li>匹配时，列表模式的优先级高于掩码模式，其次过滤器编号更小的优先级更高</li></ul><h2 id="使用CAN2过滤ID号（实验）"><a href="#使用CAN2过滤ID号（实验）" class="headerlink" title="使用CAN2过滤ID号（实验）"></a>使用CAN2过滤ID号（实验）</h2><ul><li>CAN1给CAN2发送不同ID号的数据帧</li><li>CAN2使用过滤器进行过滤</li><li>RX0和RX1分别对应不同过滤器，接收到不同数组中</li></ul><p>在之前CAN实验的代码上修改</p><p>这里我们只需要修改CAN2，把CAN_Configfilter()函数中的sFiterconfig拷贝下来</p><p>覆盖掉之前的sFiterconfig.FilterBank</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;<span class="comment">//激活过滤器</span></span><br><span class="line">sFiterconfig.FilterBank=<span class="number">0</span>;<span class="comment">//过滤器编号，CAN1是0~13</span></span><br><span class="line">sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;</span><br><span class="line">sFiterconfig.FilterMode=CAN_FILTERMODE_IDMASK;<span class="comment">//设置为掩码模式</span></span><br><span class="line">sFiterconfig.FilterScale=CAN_FILTERSCALE_32BIT;<span class="comment">//设置为32位宽</span></span><br><span class="line">sFiterconfig.FilterIdHigh=<span class="number">0x0000</span>;<span class="comment">//设置验证码</span></span><br><span class="line">sFiterconfig.FilterIdLow=<span class="number">0x0000</span>;</span><br><span class="line">sFiterconfig.FilterMaskIdHigh=<span class="number">0x0000</span>;</span><br><span class="line">sFiterconfig.FilterMaskIdLow=<span class="number">0x0000</span>;</span><br><span class="line">sFiterconfig.SlaveStartFilterBank=<span class="number">14</span>;</span><br></pre></td></tr></table></figure><ol><li><p>列表模式</p><p>绑定FIFO0</p></li></ol><p>把下面的FilterBank设置为14，FilterMode改为CAN_FILTERMODE_IDLIST，FilterScale改为CAN_FILTERSCALE_16BIT，下面的ID号改为我们需要的ID号，这里我们可以设为0x200左移5位(左移5是为了对齐msb)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;</span><br><span class="line">sFiterconfig.FilterBank=<span class="number">14</span>;<span class="comment">//过滤器编号，CAN2是14~27</span></span><br><span class="line">sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;<span class="comment">//接收到的报文放入到FIFO0中</span></span><br><span class="line">sFiterconfig.FilterMode=CAN_FILTERMODE_IDLIST;<span class="comment">//列表模式</span></span><br><span class="line">sFiterconfig.FilterScale=CAN_FILTERSCALE_32BIT;<span class="comment">//设置32位宽</span></span><br><span class="line">sFiterconfig.FilterIdHigh=<span class="number">0x200</span>&lt;&lt;<span class="number">5</span>;<span class="comment">//基本ID放入到STID中  </span></span><br><span class="line">sFiterconfig.FilterIdLow=<span class="number">0x201</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">sFiterconfig.FilterMaskIdHigh=<span class="number">0x202</span>&lt;&lt;<span class="number">5</span>;<span class="comment">//设置为0时，表示不过滤，可以接收任意的CANID数据，</span></span><br><span class="line">sFiterconfig.FilterMaskIdLow=<span class="number">0x203</span>&lt;&lt;<span class="number">5</span>;<span class="comment">//不为0时，则表示过滤 对应MaskID为1的bit必须与FilterID中的bit位相同的CANID才能接收过来。</span></span><br><span class="line">sFiterconfig.SlaveStartFilterBank=<span class="number">14</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>掩码模式</p><p>绑定FIFO1</p></li></ol><p>在HAL库中FilterIdHigh，FilterIdLow，FilterMaskIdHigh，FilterMaskIdLow</p><p><img src="hexo\source_posts\CAN过滤器的基础知识\Acrobat_AsG4nciY8E.png"></p><p>FilterBank是过滤器编号，为了避免重复，这里设置为15，FilterMode选择CAN_FILTERMODE_IDMASK，因为我们这里过滤标准帧，没必要使用32位，所以FilterScale选择16位，FilterIdHigh，FilterIdLow在16位模式下指代两个不同的掩码组，FilterIdHigh对应FilterMaskIdHigh，FilterIdLow对应FilterMaskIdLow，一共是两组；如果是32位，就要把他们整个拼成一段整体，因此这里我们需要把它们拼成两组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;</span><br><span class="line">sFiterconfig.FilterBank=<span class="number">15</span>;<span class="comment">//过滤器编号，CAN2是14~27</span></span><br><span class="line">sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO1;</span><br><span class="line">sFiterconfig.FilterMode=CAN_FILTERMODE_IDLIST;</span><br><span class="line">sFiterconfig.FilterScale=CAN_FILTERSCALE_16BIT;</span><br><span class="line">sFiterconfig.FilterIdHigh=<span class="number">0x200</span>&lt;&lt;<span class="number">5</span>;<span class="comment">//ID和掩码都要移5位</span></span><br><span class="line">sFiterconfig.FilterMaskIdHigh=<span class="number">0x202</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">sFiterconfig.FilterIdLow=<span class="number">0x201</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">sFiterconfig.FilterMaskIdLow=<span class="number">0x203</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">sFiterconfig.SlaveStartFilterBank=<span class="number">14</span>;</span><br></pre></td></tr></table></figure><p>把FilterMaskIdHigh设置为0x700，这样就表示过滤0x200到0x2FF的ID号</p><p>把FilterMaskIdHigh设置为0x7F0，这样就表示过滤0x200到0x20F的ID号</p><p>这里我们设置为0x7F0，更方便我们观察现象</p><p>然后把FilterFIFOAssignment改为CAN_FILTER_FIFO1，即绑定FIFO1，对应RX1的中断，这样就完成了掩码模式的配置</p><p>最终CAN_Configfilter()代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CAN_Configfilter</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  CAN_FilterTypeDef sFiterconfig;</span><br><span class="line">  sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;</span><br><span class="line">  sFiterconfig.FilterBank=<span class="number">0</span>;</span><br><span class="line">  sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;</span><br><span class="line">  sFiterconfig.FilterMode=CAN_FILTERMODE_IDMASK;</span><br><span class="line">  sFiterconfig.FilterScale=CAN_FILTERSCALE_32BIT;</span><br><span class="line">  sFiterconfig.FilterIdHigh=<span class="number">0x0000</span>;</span><br><span class="line">  sFiterconfig.FilterIdLow=<span class="number">0x0000</span>;</span><br><span class="line">  sFiterconfig.FilterMaskIdHigh=<span class="number">0x0000</span>;</span><br><span class="line">  sFiterconfig.FilterMaskIdLow=<span class="number">0x0000</span>;</span><br><span class="line">  sFiterconfig.SlaveStartFilterBank=<span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( HAL_CAN_ConfigFilter(&amp;hcan1,&amp;sFiterconfig)!=HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">//列表模式</span></span><br><span class="line">  sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;</span><br><span class="line">  sFiterconfig.FilterBank=<span class="number">14</span>;</span><br><span class="line">  sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;</span><br><span class="line">  sFiterconfig.FilterMode=CAN_FILTERMODE_IDLIST;</span><br><span class="line">  sFiterconfig.FilterScale=CAN_FILTERSCALE_16BIT;</span><br><span class="line">  sFiterconfig.FilterIdHigh=<span class="number">0x200</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.FilterIdLow=<span class="number">0x201</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.FilterMaskIdHigh=<span class="number">0x202</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.FilterMaskIdLow=<span class="number">0x203</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.SlaveStartFilterBank=<span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( HAL_CAN_ConfigFilter(&amp;hcan2,&amp;sFiterconfig)!=HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//掩码模式</span></span><br><span class="line">  sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;</span><br><span class="line">  sFiterconfig.FilterBank=<span class="number">15</span>;</span><br><span class="line">  sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;</span><br><span class="line">  sFiterconfig.FilterMode=CAN_FILTERMODE_IDMASK;</span><br><span class="line">  sFiterconfig.FilterScale=CAN_FILTERSCALE_16BIT;</span><br><span class="line">  sFiterconfig.FilterIdHigh=<span class="number">0x200</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.FilterIdLow=<span class="number">0x201</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.FilterMaskIdHigh=<span class="number">0x202</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.FilterMaskIdLow=<span class="number">0x203</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">  sFiterconfig.SlaveStartFilterBank=<span class="number">14</span>;</span><br><span class="line">  <span class="keyword">if</span>(HAL_CAN_Start(&amp;hcan1)!=HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(HAL_CAN_Start(&amp;hcan2)!=HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(HAL_CAN_ActivateNotification(&amp;hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING!=HAL_OK))</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(HAL_CAN_ActivateNotification(&amp;hcan2,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING!=HAL_OK))</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_can_RxFifo0MsgPendingCallback</span><span class="params">(CAN_HandleTypeDef*hcan)</span><span class="comment">//接收数据的回调函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(hcan==&amp;hcan2)</span><br><span class="line">  &#123;</span><br><span class="line">    HAL_CAN_GetRxMessage(&amp;hcan2,CAN_RX_FIFO0,&amp;rxHeader0,rxDateBuffer0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="comment">//RX0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_can_RxFifo1MsgPendingCallback</span><span class="params">(CAN_HandleTypeDef*hcan)</span><span class="comment">//接收数据的回调函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(hcan==&amp;hcan2)</span><br><span class="line">  &#123;</span><br><span class="line">    HAL_CAN_GetRxMessage(&amp;hcan2,CAN_RX_FIFO1,&amp;rxHeader1,rxDateBuffer1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="comment">//RX1</span></span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><p>然后就可以编译烧录。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CAN过滤器&quot;&gt;&lt;a href=&quot;#CAN过滤器&quot; class=&quot;headerlink&quot; title=&quot;CAN过滤器&quot;&gt;&lt;/a&gt;CAN过滤器&lt;/h1&gt;&lt;h2 id=&quot;过滤器&quot;&gt;&lt;a href=&quot;#过滤器&quot; class=&quot;headerlink&quot; title=&quot;过滤器</summary>
      
    
    
    
    
    <category term="嵌入式学习" scheme="http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="http://example.com/2023/01/11/test/"/>
    <id>http://example.com/2023/01/11/test/</id>
    <published>2023-01-11T05:56:00.000Z</published>
    <updated>2023-01-11T07:16:03.880Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个测试文档</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个测试文档&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="test" scheme="http://example.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/01/11/hello-world/"/>
    <id>http://example.com/2023/01/11/hello-world/</id>
    <published>2023-01-11T04:20:20.362Z</published>
    <updated>2023-01-11T07:21:15.005Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="test" scheme="http://example.com/tags/test/"/>
    
  </entry>
  
</feed>
