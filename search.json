[{"title":"CAN过滤器的基础知识","url":"/2023/01/12/CAN%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","content":"CAN过滤器过滤器\nSTM32的bxCAN接收时必须使用过滤器接收\n根据CAN外设数量的不同有以下情况：\n只有CAN1：CAN1有14个过滤器\n有CAN1和CAN2：CAN1和CAN2共享28个过滤器\n有CAN1~3：CAN1和CAN2共享28个过滤器，CAN3有独立的14个过滤器\n\n\n过滤器可以过滤CAN总线上帧的ID号\n可以不处理不想接收的ID号，只接收想要的ID号\n\n\n\n过滤器的过滤模式\n过滤器总长度64位，可以分为2个32位单元或4个16位单元\n两种过滤模式：掩码和列表\n掩码模式：由两个单元组成通过掩码匹配\n列表模式：由一个单元组成，ID号完全匹配即通过\n\n\nID号对齐最高位（MSB）\n仅32位单元可以过滤拓展ID\n在列表模式下，scale为32时，每个过滤器的列表只能写入两个报文ID，若scale为16时，每个过滤器的列表最多可写入4个CAN ID\n\n\n掩码（不常用掩码模式）\n两个单元分别组成匹配ID和掩码（MASK）\n\n被过滤的ID号和匹配ID号会和掩码进行按位与运算后再进行匹配\n\n也就是只有对应的掩码为1的位才会被匹配\n\n\n例如：\n\n匹配ID为0x200，掩码为0x000，则所有ID号都能通过\n匹配ID为0x200，掩码为0x700，则ID为0x200~0x2FF均可通过\n匹配ID为0x200，掩码为0x7FF，则只有0x200能通过\n\n\n可以指定一个ID号的范围，在这个范围内的ID号可以通过我们的过滤器\n过滤器一共有4种工作模式：\n32位宽的掩码模式，  配置过滤2个不同的ID号32位宽的列表模式，  配置过滤4个不同的ID号16位宽的列表模式，  配置过滤2个不同的ID号16位宽的掩码模式    配置过滤1个不同的ID号\n\n过滤器的位宽:\n16位过滤器32位过滤器\n\nCAN的双接收中断\n每个CAN有两个接收中断，对应两组接收邮箱（FIFO）\n每个过滤器可以绑定一个CAN接收中断\n经过过滤器过滤的帧会进入该过滤器绑定的接收中断对应的邮箱\n匹配时，列表模式的优先级高于掩码模式，其次过滤器编号更小的优先级更高\n\n使用CAN2过滤ID号（实验）\nCAN1给CAN2发送不同ID号的数据帧\nCAN2使用过滤器进行过滤\nRX0和RX1分别对应不同过滤器，接收到不同数组中\n\n在之前CAN实验的代码上修改\n这里我们只需要修改CAN2，把CAN_Configfilter()函数中的sFiterconfig拷贝下来\n覆盖掉之前的sFiterconfig.FilterBank\nsFiterconfig.FilterActivation = CAN_FILTER_ENABLE;//激活过滤器sFiterconfig.FilterBank=0;//过滤器编号，CAN1是0~13sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;sFiterconfig.FilterMode=CAN_FILTERMODE_IDMASK;//设置为掩码模式sFiterconfig.FilterScale=CAN_FILTERSCALE_32BIT;//设置为32位宽sFiterconfig.FilterIdHigh=0x0000;//设置验证码sFiterconfig.FilterIdLow=0x0000;sFiterconfig.FilterMaskIdHigh=0x0000;sFiterconfig.FilterMaskIdLow=0x0000;sFiterconfig.SlaveStartFilterBank=14;\n\n\n列表模式\n绑定FIFO0\n\n\n把下面的FilterBank设置为14，FilterMode改为CAN_FILTERMODE_IDLIST，FilterScale改为CAN_FILTERSCALE_16BIT，下面的ID号改为我们需要的ID号，这里我们可以设为0x200左移5位(左移5是为了对齐msb)\nsFiterconfig.FilterActivation = CAN_FILTER_ENABLE;sFiterconfig.FilterBank=14;//过滤器编号，CAN2是14~27sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;//接收到的报文放入到FIFO0中sFiterconfig.FilterMode=CAN_FILTERMODE_IDLIST;//列表模式sFiterconfig.FilterScale=CAN_FILTERSCALE_32BIT;//设置32位宽sFiterconfig.FilterIdHigh=0x200&lt;&lt;5;//基本ID放入到STID中  sFiterconfig.FilterIdLow=0x201&lt;&lt;5;sFiterconfig.FilterMaskIdHigh=0x202&lt;&lt;5;//设置为0时，表示不过滤，可以接收任意的CANID数据，sFiterconfig.FilterMaskIdLow=0x203&lt;&lt;5;//不为0时，则表示过滤 对应MaskID为1的bit必须与FilterID中的bit位相同的CANID才能接收过来。sFiterconfig.SlaveStartFilterBank=14;\n\n\n掩码模式\n绑定FIFO1\n\n\n在HAL库中FilterIdHigh，FilterIdLow，FilterMaskIdHigh，FilterMaskIdLow\n\nFilterBank是过滤器编号，为了避免重复，这里设置为15，FilterMode选择CAN_FILTERMODE_IDMASK，因为我们这里过滤标准帧，没必要使用32位，所以FilterScale选择16位，FilterIdHigh，FilterIdLow在16位模式下指代两个不同的掩码组，FilterIdHigh对应FilterMaskIdHigh，FilterIdLow对应FilterMaskIdLow，一共是两组；如果是32位，就要把他们整个拼成一段整体，因此这里我们需要把它们拼成两组\nsFiterconfig.FilterActivation = CAN_FILTER_ENABLE;sFiterconfig.FilterBank=15;//过滤器编号，CAN2是14~27sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO1;sFiterconfig.FilterMode=CAN_FILTERMODE_IDLIST;sFiterconfig.FilterScale=CAN_FILTERSCALE_16BIT;sFiterconfig.FilterIdHigh=0x200&lt;&lt;5;//ID和掩码都要移5位sFiterconfig.FilterMaskIdHigh=0x202&lt;&lt;5;sFiterconfig.FilterIdLow=0x201&lt;&lt;5;sFiterconfig.FilterMaskIdLow=0x203&lt;&lt;5;sFiterconfig.SlaveStartFilterBank=14;\n\n把FilterMaskIdHigh设置为0x700，这样就表示过滤0x200到0x2FF的ID号\n把FilterMaskIdHigh设置为0x7F0，这样就表示过滤0x200到0x20F的ID号\n这里我们设置为0x7F0，更方便我们观察现象\n然后把FilterFIFOAssignment改为CAN_FILTER_FIFO1，即绑定FIFO1，对应RX1的中断，这样就完成了掩码模式的配置\n最终CAN_Configfilter()代码如下：\n/* USER CODE BEGIN 4 */void CAN_Configfilter()&#123;  CAN_FilterTypeDef sFiterconfig;  sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;  sFiterconfig.FilterBank=0;  sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;  sFiterconfig.FilterMode=CAN_FILTERMODE_IDMASK;  sFiterconfig.FilterScale=CAN_FILTERSCALE_32BIT;  sFiterconfig.FilterIdHigh=0x0000;  sFiterconfig.FilterIdLow=0x0000;  sFiterconfig.FilterMaskIdHigh=0x0000;  sFiterconfig.FilterMaskIdLow=0x0000;  sFiterconfig.SlaveStartFilterBank=14;  if( HAL_CAN_ConfigFilter(&amp;hcan1,&amp;sFiterconfig)!=HAL_OK)  &#123;    Error_Handler();  &#125; //列表模式  sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;  sFiterconfig.FilterBank=14;  sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;  sFiterconfig.FilterMode=CAN_FILTERMODE_IDLIST;  sFiterconfig.FilterScale=CAN_FILTERSCALE_16BIT;  sFiterconfig.FilterIdHigh=0x200&lt;&lt;5;  sFiterconfig.FilterIdLow=0x201&lt;&lt;5;  sFiterconfig.FilterMaskIdHigh=0x202&lt;&lt;5;  sFiterconfig.FilterMaskIdLow=0x203&lt;&lt;5;  sFiterconfig.SlaveStartFilterBank=14;  if( HAL_CAN_ConfigFilter(&amp;hcan2,&amp;sFiterconfig)!=HAL_OK)  &#123;    Error_Handler();  &#125;  //掩码模式  sFiterconfig.FilterActivation = CAN_FILTER_ENABLE;  sFiterconfig.FilterBank=15;  sFiterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;  sFiterconfig.FilterMode=CAN_FILTERMODE_IDMASK;  sFiterconfig.FilterScale=CAN_FILTERSCALE_16BIT;  sFiterconfig.FilterIdHigh=0x200&lt;&lt;5;  sFiterconfig.FilterIdLow=0x201&lt;&lt;5;  sFiterconfig.FilterMaskIdHigh=0x202&lt;&lt;5;  sFiterconfig.FilterMaskIdLow=0x203&lt;&lt;5;  sFiterconfig.SlaveStartFilterBank=14;  if(HAL_CAN_Start(&amp;hcan1)!=HAL_OK)  &#123;    Error_Handler();  &#125;  if(HAL_CAN_Start(&amp;hcan2)!=HAL_OK)  &#123;    Error_Handler();  &#125;  if(HAL_CAN_ActivateNotification(&amp;hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING!=HAL_OK))  &#123;    Error_Handler();  &#125;    if(HAL_CAN_ActivateNotification(&amp;hcan2,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING!=HAL_OK))  &#123;    Error_Handler();  &#125;&#125;void HAL_can_RxFifo0MsgPendingCallback(CAN_HandleTypeDef*hcan)//接收数据的回调函数&#123;  if(hcan==&amp;hcan2)  &#123;    HAL_CAN_GetRxMessage(&amp;hcan2,CAN_RX_FIFO0,&amp;rxHeader0,rxDateBuffer0);  &#125;&#125;//RX0void HAL_can_RxFifo1MsgPendingCallback(CAN_HandleTypeDef*hcan)//接收数据的回调函数&#123;    if(hcan==&amp;hcan2)  &#123;    HAL_CAN_GetRxMessage(&amp;hcan2,CAN_RX_FIFO1,&amp;rxHeader1,rxDateBuffer1);  &#125;&#125;//RX1/* USER CODE END 4 */\n\n然后就可以编译烧录。\n","tags":["嵌入式学习"]},{"title":"Hello World","url":"/2023/01/11/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","tags":["test"]},{"title":"Test","url":"/2023/01/11/test/","content":"这是一个测试文档\n","tags":["test"]}]